using Microsoft.EntityFrameworkCore;
using Notes.Domain;

namespace Notes.Application.Interfaces
{
    /*
         * Этот код определяет интерфейс INotesDbContext, который абстрагирует контекст базы данных 
           для приложения, работающего с заметками. Интерфейс используется для определения контрактов, 
           которые должны быть реализованы контекстом базы данных, и упрощает тестирование и подмену 
           реализации в процессе разработки.

         * INotesDbContext содержит следующие члены:

            * DbSet<Note> Notes: Это свойство представляет собой набор данных заметок типа Note. 
              Используя этот объект DbSet, приложение может выполнять операции над заметками в базе данных, 
              такие как создание, обновление, удаление и поиск.

        * Task<int> SaveChangesAsync(CancellationToken cancellationToken): Это асинхронный метод, 
          который сохраняет все сделанные изменения в базе данных. Он возвращает Task<int>, 
          обещание (promise), которое в результате вернет количество затронутых строк в базе данных. 
          Метод принимает аргумент CancellationToken для обработки отмены операции сохранения изменений, 
          если это необходимо.

        Использование интерфейса INotesDbContext позволяет более гибко управлять зависимостями в приложении. 
        Контекст базы данных может быть заменен на другую реализацию или подменен мок-объектом (mock object) 
        для тестирования, не внося изменений в остальной код, который использует контекст через интерфейс.

        Обычно конкретная реализация INotesDbContext будет включать в себя класс, наследующий 
        от DbContext (из Entity Framework Core) и реализующий все члены интерфейса. 
        Таким образом, приложение будет использовать реализацию интерфейса для взаимодействия 
        с базой данных с использованием Entity Framework Core, что обеспечивает удобный 
        и эффективный способ работы с данными.
    */
    public interface INotesDbContext
    {
        DbSet<Note> Notes { get; set; }
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
    }
}