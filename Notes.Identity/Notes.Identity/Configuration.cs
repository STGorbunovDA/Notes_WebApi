using IdentityModel;
using IdentityServer4.Models;
using IdentityServer4;

namespace Notes.Identity
{
    public static class Configuration
    {
        /*
            * В этом коде в первую очередь определяются конфигурации, нужные для сервера 
              IdentityServer 4. Он создает коллекции различных типов данных IdentityServer, 
              которые используются для определения его поведения и доступных ресурсов:

                * ApiScopes: Определяет набор областей видимости API, которые экспонируются 
                  через сервер. В данном случае создается единственная область видимости API 
                  с именем NotesWebAPI и отображаемым именем Web API.

                * IdentityResources: Это набор данных пользовательской идентификации, 
                  которые доступны через сервер. В этом случае ресурсы IdentityServer 
                  включают "OpenId" и "Profile", что позволяет клиентам запрашивать 
                  информацию о пользователе, такую как его уникальный идентификатор 
                  и профильные данные.

                * ApiResources: Это определение API, которые доступны через сервер. 
                  Здесь создается единственный API ресурс с именем NotesWebAPI, 
                  отображаемым именем Web API и набором claim, которые будут включены 
                  в токен доступа (JwtClaimTypes.Name). Соответствующее области видимости, 
                  определенное в ApiScopes добавляется в поле Scopes.

                * Clients: Это набор клиентских приложений, которые имеют право обращаться 
                  к серверу. В данном случае создается единственный клиент с различными 
                  параметрами, определяющими его поведение, такими как позволить авторизацию 
                  через код, не требовать секрет клиента, использовать PKCE и разрешить 
                  различные области видимости, включая OpenId, Profile и NotesWebAPI.

            Таким образом, данный код определяет поведение сервера OAuth/OIDC 
            в отношении его клиентов, пользователях и доступных API.
        */
        public static IEnumerable<ApiScope> ApiScopes =>
            new List<ApiScope>
            {
                new ApiScope("NotesWebAPI", "Web API")
            };

        public static IEnumerable<IdentityResource> IdentityResources =>
            new List<IdentityResource>
            {
                new IdentityResources.OpenId(),
                new IdentityResources.Profile()
            };

        public static IEnumerable<ApiResource> ApiResources =>
            new List<ApiResource>
            {
                new ApiResource("NotesWebAPI", "Web API", new []
                    { JwtClaimTypes.Name})
                {
                    Scopes = {"NotesWebAPI"}
                }
            };

        public static IEnumerable<Client> Clients =>
            new List<Client>
            {
                new Client
                {
                    ClientId = "notes-web-api",
                    ClientName = "Notes Web",
                    /*
                        * GrantTypes.Code указывает на то, что клиентское приложение будет 
                          использовать "authorization code flow" (поток авторизационного кода) 
                          в OAuth 2.0.

                        * Авторизационный код — это один из методов, которые используются 
                          в процессе аутентификации в OAuth 2.0. Это обычно используется 
                          при работе с веб-приложениями, когда пользователь перенаправляется 
                          на сайт провайдера OAuth для логина, после чего, если аутентификация 
                          проходит успешно, пользователь перенаправляется обратно на сайт клиента, 
                          передавая при этом "code" в параметрах URL.

                        * Этот код затем обменивается между сайтом и провайдером OAuth на 
                          токен доступа (access token). Благодаря этому механизму, сайт 
                          никогда не видит непосредственно учетные данные пользователя 
                          (логин и пароль), что повышает безопасность процедуры.

                        Установка AllowedGrantTypes = GrantTypes.Code в конфигурации клиента 
                        обозначает, что клиент должен использовать именно эту стратегию при 
                        работе с сервером аутентификации. 
                    */
                    AllowedGrantTypes = GrantTypes.Code,
                    /*
                        * RequireClientSecret = false означает, что сервер IdentityServer 4 
                          не требует предоставления секретного ключа клиента при аутентификации 
                          и использовании API.

                        * В стандартном протоколе OAuth 2.0 и IdentityServer 4, клиенты могут 
                          представлять себя в виде веб-приложений, мобильных приложений 
                          или других систем, которым разрешен доступ к защищенным ресурсам 
                          сервера IdentityServer. Каждый клиент, зарегистрированный на сервере, 
                          обычно имеет идентификатор клиента (Client ID) и секретный ключ клиента 
                          (Client Secret), которые используются для аутентификации клиента 
                          при запросе токена доступа.

                        * Однако, установка RequireClientSecret = false позволяет клиентам 
                          обойтись без предоставления секретного ключа клиента при аутентификации. 
                          Вместо этого, клиенты могут использовать другие методы аутентификации, 
                          такие как Proof Key for Code Exchange (PKCE) или "client assertion", 
                          чтобы подтвердить свою легитимность при запросе токена доступа.

                        * Это может быть полезно для некоторых типов клиентских приложений, 
                          таких как JavaScript-приложения, которые работают в браузере 
                          и не могут надежно сохранять секретный ключ клиента, или для 
                          публичных API, которым доступны множество клиентов без секретных ключей.

                        Важно отметить, что использование RequireClientSecret = false 
                        следует осуществлять с осторожностью и рассмотреть потенциальные 
                        угрозы безопасности, связанные с доступом к защищенным ресурсам 
                        без секретного ключа клиента. Необходимо оценить риски и принять 
                        соответствующие меры безопасности для защиты системы и ее ресурсов.
                    */
                    RequireClientSecret = false,
                    /*
                        * RequirePkce = true означает, что сервер IdentityServer 4 требует 
                          использование Proof Key for Code Exchange (PKCE) при использовании 
                          авторизационного кода (authorization code flow) в методе аутентификации.

                        * PKCE является дополнительным уровнем безопасности, который защищает 
                          протокол авторизации OAuth 2.0 от атак, связанных с перехватом и 
                          использованием авторизационного кода злоумышленниками.

                        * При использовании PKCE, клиентское приложение (веб-приложение 
                          или мобильное приложение) генерирует случайное значение, 
                          известное как "код верификатора" (verifier), и вычисляет 
                          хэш-код этого значения, называемый "код проверки" (challenge). 
                          Затем, в процессе инициирования авторизации, клиент передает 
                          код проверки серверу IdentityServer, 
                          а также хранит код верификатора.

                        * При получении авторизационного кода от сервера, клиент 
                          отправляет код верификатора вместе с кодом авторизации 
                          при обмене авторизационного кода на токен доступа. 
                          Сервер IdentityServer сверяет код проверки, полученный 
                          от клиента, с хэш-кодом, который был сохранен на этапе 
                          авторизации. Если хэш-коды совпадают, сервер разрешает 
                          обмен авторизационного кода на токен доступа.

                        Таким образом, установка RequirePkce = true в конфигурации 
                        сервера указывает на то, что клиентам требуется использовать 
                        PKCE для обеспечения безопасности при обмене авторизационного 
                        кода на токен доступа.
                    */
                    RequirePkce = true,
                    /*
                        * Этот список URI, куда клиентские приложения могут быть перенаправлены 
                          после того, как пользователь войдет в систему. Протокол OpenID Connect 
                          использует эти URI для отправки ID токена и (в случае использования 
                          code flow) кода авторизации клиенту. URI должны быть зарегистрированы 
                          по причине безопасности, чтобы сервер мог проверить и предотвратить 
                          перенаправление на неавторизованные адреса.
                    */
                    RedirectUris =
                    {
                        "http://.../signin-oidc"
                    },
                    /*
                        * Список URI-источников, которые разрешены для запросов 
                          CORS (Cross-Origin Resource Sharing). CORS — это механизм безопасности 
                          браузеров, который контролирует, какие веб-ресурсы могут быть доступны 
                          веб-приложению, работающему в другом источнике (домене, протоколе или порту).
                    */
                    AllowedCorsOrigins =
                    {
                        "http://..."
                    },
                    /*
                        * Этот список URI, куда клиентские приложения могут быть перенаправлены 
                          после выхода пользователя из системы. Это используется в протоколе 
                          OpenID Connect для возвращения пользователя на свое приложение 
                          после выхода из системы.
                    */
                    PostLogoutRedirectUris =
                    {
                        "http:/.../signout-oidc"
                    },
                    /*
                        * Это список идентификаторов областей действия (scopes), которые 
                          клиенту разрешено запрашивать при аутентификации пользователя. 
                          Области действия указывают, какие именно части информации 
                          клиент хочет получить о пользователе или о системе. В данном 
                          примере есть стандартные области OpenID и Profile, а также 
                          специфичная область "NotesWebAPI".
                    */
                    AllowedScopes =
                    {
                        IdentityServerConstants.StandardScopes.OpenId,
                        IdentityServerConstants.StandardScopes.Profile,
                        "NotesWebAPI"
                    },
                    /*
                        * Этот параметр указывает, разрешено ли клиентам получать токены 
                          доступа через браузер. Это может быть нужно для JavaScript-приложений 
                          в браузере, которые используют протокол OpenID Connect implicit flow. 
                          Важно учитывать возможные риски безопасности при использовании этого 
                          параметра, поскольку браузеры могут быть подвержены определенным типам атак.
                    */
                    AllowAccessTokensViaBrowser = true
                }
            };
    }
}
